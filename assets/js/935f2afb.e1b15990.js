"use strict";(self.webpackChunkneo_4_jperf_guide=self.webpackChunkneo_4_jperf_guide||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"neo4jperf_guide":[{"type":"link","label":"Introduction","href":"/","docId":"introduction"},{"type":"link","label":"Import data","href":"/neo4j-slow-import-data-performance","docId":"import-data"},{"type":"link","label":"Indexing","href":"/neo4j-slow-query-performance-issue","docId":"indexing"}]},"docs":{"import-data":{"id":"import-data","title":"Import data","description":"Executing wast amounts of transactions in a small time frame can be an interesting engineering challenge. One example of this activity is importing huge amounts of data into the Neo4j graph database. Importing data in the Neo4j graph database can come with some performance difficulties. Let\'s explore a few issues and how to handle them.","sidebar":"neo4jperf_guide"},"indexing":{"id":"indexing","title":"Indexing","description":"Ahh, indexing! One of the most common pitfalls in database performance in general, Neo4j included, is the usage of indexes. At first, it may seem what I need and index for in the Graph database, but graphs can be stored as some other data structure in the background, this means you can index and optimize for storage data structure. The wrong usage of the index can make a database unusable, which can be quite painful. Let\'s see a few common issues with Neo4j database performance and indexes.","sidebar":"neo4jperf_guide"},"introduction":{"id":"introduction","title":"Introduction","description":"Welcome to the Neo4j Performance Guide!","sidebar":"neo4jperf_guide"}}}')}}]);